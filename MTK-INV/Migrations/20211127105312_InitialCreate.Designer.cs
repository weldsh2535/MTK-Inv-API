// <auto-generated />
using System;
using MTK_Inv.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MTK_Delivery.Migrations
{
    [DbContext(typeof(dataContext))]
    [Migration("20211127105312_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MTK_Inv.Models.AddStock", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NewQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OldQuantity")
                        .HasColumnType("int");

                    b.Property<string>("addStockNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.ToTable("AddStock");
                });

            modelBuilder.Entity("MTK_Inv.Models.CountSheet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countQty")
                        .HasColumnType("int");

                    b.Property<int>("differenceQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<string>("sheetNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("storeId")
                        .HasColumnType("int");

                    b.Property<int>("systemQty")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.HasIndex("storeId");

                    b.ToTable("CountSheet");
                });

            modelBuilder.Entity("MTK_Inv.Models.Customer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("balance")
                        .HasColumnType("int");

                    b.Property<string>("fullname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("phonenumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MTK_Inv.Models.IdSetting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("currentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("length")
                        .HasColumnType("int");

                    b.Property<string>("prefix")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("suffix")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("voucherTypeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("voucherTypeId");

                    b.ToTable("IdSetting");
                });

            modelBuilder.Entity("MTK_Inv.Models.ItemCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("parentcategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("picture")
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("MTK_Inv.Models.ItemLocation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.ToTable("ItemLocation");
                });

            modelBuilder.Entity("MTK_Inv.Models.ItemStoreBalance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("beginingQuantity")
                        .HasColumnType("int");

                    b.Property<int>("currentQuantity")
                        .HasColumnType("int");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("storeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.HasIndex("storeId");

                    b.ToTable("ItemStoreBalance");
                });

            modelBuilder.Entity("MTK_Inv.Models.Items", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                    b.Property<string>("itemCode")
                         .HasMaxLength(50)
                         .HasColumnType("nvarchar(50)");
                    b.Property<string>("AmaricName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CatagoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CookingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("brand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("cost")
                        .HasColumnType("float");

                    b.Property<string>("discrption")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("picture")
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("remark")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("storeid")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("CatagoryId");

                    b.HasIndex("storeid");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("MTK_Inv.Models.LineItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<decimal>("subTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("taxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("vocherId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.HasIndex("vocherId");

                    b.ToTable("LineItem");
                });

            modelBuilder.Entity("MTK_Inv.Models.Lookup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("remark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("type");

                    b.ToTable("lookup");
                });

            modelBuilder.Entity("MTK_Inv.Models.LookupCatagory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("picture")
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("LookupCatagory");
                });

            modelBuilder.Entity("MTK_Inv.Models.StockAdjustment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAfter")
                        .HasColumnType("int");

                    b.Property<int>("QuantityBefore")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("store")
                        .HasColumnType("int");

                    b.Property<string>("transactionNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("transactionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.HasIndex("store");

                    b.ToTable("StockAdjustment");
                });

            modelBuilder.Entity("MTK_Inv.Models.StoreTransfer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignTo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("fromStoreId")
                        .HasColumnType("int");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("storeTransferId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("toStoreId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("fromStoreId");

                    b.HasIndex("itemId");

                    b.HasIndex("toStoreId");

                    b.ToTable("storeTransfer");
                });

            modelBuilder.Entity("MTK_Inv.Models.Supplier", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("agreement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("balance")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("commission")
                        .HasColumnType("float");

                    b.Property<string>("country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("MTK_Inv.Models.UserRole", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("funId")
                        .HasColumnType("int");

                    b.Property<string>("remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("funId");

                    b.HasIndex("userId");

                    b.ToTable("userRole");
                });

            modelBuilder.Entity("MTK_Inv.Models.Users", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("empId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("MTK_Inv.Models.Vendors", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("balance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("contact")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("phonenumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("vendorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("website")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("MTK_Inv.Models.Vocher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<double>("grandTotal")
                        .HasColumnType("float");

                    b.Property<double>("subTotal")
                        .HasColumnType("float");

                    b.Property<double>("taxAmount")
                        .HasColumnType("float");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("vendor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("vocherId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("vocherTypeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.HasIndex("vocherTypeId");

                    b.ToTable("Vocher");
                });

            modelBuilder.Entity("MTK_Inv.Models.VocherStoreTransation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<int>("fromStoreId")
                        .HasColumnType("int");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("toStoreId")
                        .HasColumnType("int");

                    b.Property<string>("vocherId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("fromStoreId");

                    b.HasIndex("itemId");

                    b.HasIndex("toStoreId");

                    b.ToTable("vocherStoreTransation");
                });

            modelBuilder.Entity("MTK_Inv.Models.functionality", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("compName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("id");

                    b.ToTable("functionality");
                });

            modelBuilder.Entity("MTK_Inv.Models.AddStock", b =>
                {
                    b.HasOne("MTK_Inv.Models.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("items");
                });

            modelBuilder.Entity("MTK_Inv.Models.CountSheet", b =>
                {
                    b.HasOne("MTK_Inv.Models.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Lookup", "lookup")
                        .WithMany()
                        .HasForeignKey("storeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("items");

                    b.Navigation("lookup");
                });

            modelBuilder.Entity("MTK_Inv.Models.IdSetting", b =>
                {
                    b.HasOne("MTK_Inv.Models.Lookup", "lookup")
                        .WithMany()
                        .HasForeignKey("voucherTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("lookup");
                });

            modelBuilder.Entity("MTK_Inv.Models.ItemLocation", b =>
                {
                    b.HasOne("MTK_Inv.Models.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("items");
                });

            modelBuilder.Entity("MTK_Inv.Models.ItemStoreBalance", b =>
                {
                    b.HasOne("MTK_Inv.Models.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Lookup", "lookup")
                        .WithMany()
                        .HasForeignKey("storeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("items");

                    b.Navigation("lookup");
                });

            modelBuilder.Entity("MTK_Inv.Models.Items", b =>
                {
                    b.HasOne("MTK_Inv.Models.ItemCategory", "itemCategory")
                        .WithMany()
                        .HasForeignKey("CatagoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Lookup", "lookup")
                        .WithMany()
                        .HasForeignKey("storeid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("itemCategory");

                    b.Navigation("lookup");
                });

            modelBuilder.Entity("MTK_Inv.Models.LineItem", b =>
                {
                    b.HasOne("MTK_Inv.Models.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Vocher", "vocher")
                        .WithMany()
                        .HasForeignKey("vocherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("items");

                    b.Navigation("vocher");
                });

            modelBuilder.Entity("MTK_Inv.Models.Lookup", b =>
                {
                    b.HasOne("MTK_Inv.Models.LookupCatagory", "lookupCategory")
                        .WithMany()
                        .HasForeignKey("type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("lookupCategory");
                });

            modelBuilder.Entity("MTK_Inv.Models.StockAdjustment", b =>
                {
                    b.HasOne("MTK_Inv.Models.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Lookup", "lookup")
                        .WithMany()
                        .HasForeignKey("store")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("items");

                    b.Navigation("lookup");
                });

            modelBuilder.Entity("MTK_Inv.Models.StoreTransfer", b =>
                {
                    b.HasOne("MTK_Inv.Models.Lookup", "lookupFromStoreId")
                        .WithMany()
                        .HasForeignKey("fromStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Lookup", "lookupToStoreId")
                        .WithMany()
                        .HasForeignKey("toStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("items");

                    b.Navigation("lookupFromStoreId");

                    b.Navigation("lookupToStoreId");
                });

            modelBuilder.Entity("MTK_Inv.Models.UserRole", b =>
                {
                    b.HasOne("MTK_Inv.Models.functionality", "functionality")
                        .WithMany()
                        .HasForeignKey("funId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Users", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("functionality");

                    b.Navigation("user");
                });

            modelBuilder.Entity("MTK_Inv.Models.Vocher", b =>
                {
                    b.HasOne("MTK_Inv.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Lookup", "lookup")
                        .WithMany()
                        .HasForeignKey("vocherTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("lookup");
                });

            modelBuilder.Entity("MTK_Inv.Models.VocherStoreTransation", b =>
                {
                    b.HasOne("MTK_Inv.Models.Lookup", "lookupFromStoreId")
                        .WithMany()
                        .HasForeignKey("fromStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Items", "items")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTK_Inv.Models.Lookup", "lookupToStoreID")
                        .WithMany()
                        .HasForeignKey("toStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("items");

                    b.Navigation("lookupFromStoreId");

                    b.Navigation("lookupToStoreID");
                });
#pragma warning restore 612, 618
        }
    }
}
